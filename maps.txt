import geopandas as gpd
import pandas as pd
import folium
from folium.plugins import HeatMap
import plotly.graph_objs as go
from shapely.geometry import Point
from jinja2 import Template

# Load the data
data = pd.read_csv('well_data.csv')  # Replace with your CSV file
shape_data = gpd.read_file('townships_shapefile.shp')  # Replace with your shapefile

# Convert well data to GeoDataFrame
geometry = [Point(xy) for xy in zip(data['longitude'], data['latitude'])]
geo_data = gpd.GeoDataFrame(data, geometry=geometry)

# Function to filter and create heatmap
def create_heatmap_html(eur_months, formation, wells_per_section, propant_intensity):
    filtered_data = geo_data[
        (geo_data['EUR_months'] == eur_months) &
        (geo_data['formation'] == formation) &
        (geo_data['wells_per_section'] == wells_per_section) &
        (geo_data['propant_intensity'] == propant_intensity)
    ]

    # Create a base map
    m = folium.Map(location=[geo_data['latitude'].mean(), geo_data['longitude'].mean()], zoom_start=10)

    # Add heat map
    heat_data = [[point.xy[1][0], point.xy[0][0]] for point in filtered_data.geometry ]
    HeatMap(heat_data).add_to(m)

    # Add township boundaries
    folium.GeoJson(shape_data).add_to(m)

    # Save to HTML
    m.save('heatmap.html')

# Function to create production plots
def create_production_plots(data):
    months = data['months_of_production']
    summed_production = data['summed_production']
    forecasted_data = data['forecasted_production']
    
    # Scatter chart
    scatter = go.Figure()
    scatter.add_trace(go.Scatter(x=months, y=summed_production, mode='lines', name='Summed Production'))
    scatter.add_trace(go.Scatter(x=months, y=forecasted_data, mode='lines', name='Forecasted Data', line=dict(dash='dot')))
    scatter.update_layout(title='Production Data', xaxis_title='Months', yaxis_title='Production', yaxis_type='log')
    
    # Cumulative production graph
    cumulative_production = summed_production.cumsum()
    cum_graph = go.Figure()
    cum_graph.add_trace(go.Scatter(x=months, y=cumulative_production, mode='lines', name='Cumulative Production'))
    cum_graph.update_layout(title='Cumulative Production', xaxis_title='Months', yaxis_title='Cumulative Production')
    
    # Save to HTML
    scatter.write_html('scatter.html')
    cum_graph.write_html('cumulative.html')

# Filter data (example values, adjust as needed)
create_heatmap_html(12, 'FormationA', 5, 1000)
create_production_plots(data)

# Combine heatmap and plots into a single HTML
html_template = """
<!DOCTYPE html>
<html>
<head>
    <title>Interactive Map and Plots</title>
    <style>
        #map {
            height: 600px;
            width: 48%;
            float: left;
        }
        #scatter {
            height: 300px;
            width: 48%;
            float: right;
        }
        #cumulative {
            height: 300px;
            width: 48%;
            float: right;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <div id="scatter"></div>
    <div id="cumulative"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.js"></script>
    <script>
        var mapDiv = document.getElementById('map');
        mapDiv.innerHTML = '<object type="text/html" data="heatmap.html" style="width:100%; height:100%;"></object>';

        var scatterDiv = document.getElementById('scatter');
        scatterDiv.innerHTML = '<object type="text/html" data="scatter.html" style="width:100%; height:100%;"></object>';

        var cumulativeDiv = document.getElementById('cumulative');
        cumulativeDiv.innerHTML = '<object type="text/html" data="cumulative.html" style="width:100%; height:100%;"></object>';
    </script>
</body>
</html>
"""

# Save combined HTML
with open('combined.html', 'w') as f:
    f.write(html_template)

print("HTML file created successfully: combined.html")
