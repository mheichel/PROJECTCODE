import dash
from dash import dcc, html, Input, Output, State
import dash_daq as daq
import plotly.graph_objs as go
import pandas as pd
import numpy as np
import glob

# Load your data
def load_files(file_pattern):
    files = glob.glob(file_pattern)
    data = {}
    for file in files:
        df = pd.read_csv(file, low_memory=False)
        df['Date'] = pd.to_datetime(df['Date'])
        df = df.sort_values(by=['API 14', 'Date'])
        df['Normalized Month'] = df.groupby('API 14').cumcount() + 1
        month_count = int(file.split('_')[2])
        data[month_count] = df
    return data

def calculate_cumulative(df):
    df['Cumulative Production'] = df.groupby('API 14')['Oil Production (BBL/M)'].cumsum()
    df['Cumulative Forecast'] = df.groupby('API 14')['Oil Forecast (BBL/M)'].cumsum()
    return df

def filter_wells(data_dict):
    filtered_data = {}
    for month, df in data_dict.items():
        if month == 60:
            api_60 = df['API 14'].unique()
        if month == 6:
            api_6 = df['API 14'].unique()
    valid_apis = set(api_6).intersection(api_60)
    for month, df in data_dict.items():
        df = df[df['API 14'].isin(valid_apis)]
        filtered_data[month] = df
    return filtered_data

def calculate_p90(data_dict):
    differences = []
    for api in data_dict[60]['API 14'].unique():
        cum_6 = data_dict[6].loc[data_dict[6]['API 14'] == api, 'Cumulative Forecast'].iloc[-1]
        cum_60 = data_dict[60].loc[data_dict[60]['API 14'] == api, 'Cumulative Forecast'].iloc[-1]
        if cum_60 != 0:
            abs_diff = abs(cum_60 - cum_6)
            differences.append((api, abs_diff))
    df_differences = pd.DataFrame(differences, columns=['API 14', 'Abs Difference'])
    perct90 = df_differences[df_differences['API 14'] == 30025428950000]['Abs Difference']
    return [30025428950000]

file_pattern = 'Delaware_NM_*_Months_Combined_Monthly.csv'
data_dict = load_files(file_pattern)
for month in data_dict:
    data_dict[month] = calculate_cumulative(data_dict[month])
filtered_data_dict = filter_wells(data_dict)
p90_api = calculate_p90(filtered_data_dict)

# Default line colors and widths
line_colors = {
    'Production': '#0E5E1E',
    '6 Month Forecast': 'red',
    '12 Month Forecast': 'orangered',
    '18 Month Forecast': 'orange',
    '24 Month Forecast': 'darkkhaki',
    '30 Month Forecast': 'turquoise',
    '36 Month Forecast': 'blue',
    '42 Month Forecast': 'indigo',
    '48 Month Forecast': 'violet',
    '54 Month Forecast': 'darkgray',
    '60 Month Forecast': 'black',
}
line_width = 3

def plot_production(data_dict, p90_api, line_colors, line_width):
    scatter = go.Figure()
    df = data_dict
    for month in data_dict.keys():
        for api in p90_api:
            well_data = df[month][df[month]['API 14'] == api].reset_index()
            if month == 6:
                scatter.add_trace(go.Scatter(
                    x=well_data['Normalized Month'],
                    y=well_data['Oil Production (BBL/M)'],
                    mode='lines',
                    line=dict(color=line_colors['Production'], width=line_width),  # Thicker line
                    name='Production'
                ))
            well_data.loc[0, 'Oil Forecast (BBL/M)'] = well_data.loc[0, 'Oil Production (BBL/M)']
            well_data.loc[1, 'Oil Forecast (BBL/M)'] = well_data.loc[1, 'Oil Production (BBL/M)']
            scatter.add_trace(go.Scatter(
                x=well_data['Normalized Month'],
                y=well_data['Oil Forecast (BBL/M)'],
                mode='lines',
                line=dict(dash='5px 4px', color=line_colors[f'{month} Month Forecast'], width=line_width),  # Thicker line
                name=f'{month} Month Forecast'
            ))
    scatter.update_layout(
        title=f"Production Data | API: {p90_api}",
        yaxis_title='Barrels of Oil',
        template='plotly_dark',
        hovermode='x',
        font=dict(color='white')  # Change text color to white
    )
    scatter.update_xaxes(tickfont=dict(color='white'), titlefont=dict(color='white'))  # White axis labels
    scatter.update_yaxes(tickfont=dict(color='white'), titlefont=dict(color='white'))  # White axis labels
    return scatter

# Create the Dash app
app = dash.Dash(__name__)

app.layout = html.Div([
    html.Div([
        html.Label('Line Width:'),
        dcc.Slider(
            id='line-width-slider',
            min=1,
            max=10,
            step=1,
            value=3,
            marks={i: str(i) for i in range(1, 11)},
            tooltip={"placement": "bottom", "always_visible": True}
        ),
        html.Label('Select Line Color:'),
        dcc.Dropdown(
            id='line-color-dropdown',
            options=[{'label': key, 'value': key} for key in line_colors.keys()],
            value='Production'
        ),
        daq.ColorPicker(
            id='color-picker',
            value=dict(hex='#0E5E1E'),
            size=150,
        ),
        html.Label('Search API:'),
        dcc.Input(
            id='api-search',
            type='text',
            value='30025428950000',
            style={'margin-top': '10px'}
        )
    ], style={'padding': 20, 'flex': 1}),
    html.Div([
        dcc.Graph(id='production-plot'),
    ], style={'padding': 20, 'flex': 3})
], style={'display': 'flex'})

@app.callback(
    Output('production-plot', 'figure'),
    Input('line-width-slider', 'value'),
    Input('line-color-dropdown', 'value'),
    Input('color-picker', 'value'),
    Input('api-search', 'value')
)
def update_plot(line_width, line_color_key, line_color_value, api_search):
    line_colors[line_color_key] = line_color_value['hex']
    p90_api = [api_search]
    fig = plot_production(filtered_data_dict, p90_api, line_colors, line_width)
    return fig

if __name__ == '__main__':
    app.run_server(debug=True)
