import pandas as pd
import folium
import geopandas as gpd
import numpy as np
from shapely.geometry import Point
import branca.colormap as cm

# Load the wells_df
wells_df = pd.read_csv('AllWellsNoError.csv', usecols=['API 14', 'Surface Longitude', 'Surface Latitude', 'EUR/PLL (BBL/FT) 6 Months', 'EUR/PLL (BBL/FT) 60 Months'])
wells_df = wells_df.rename(columns={'Surface Longitude': 'longitude', 'Surface Latitude': 'latitude'})
wells_df = wells_df[wells_df['latitude'] > 0.1]
wells_df = wells_df[wells_df['EUR/PLL (BBL/FT) 6 Months'] > 0.1]
wells_df = wells_df[wells_df['EUR/PLL (BBL/FT) 6 Months'] < np.nanpercentile(wells_df['EUR/PLL (BBL/FT) 6 Months'], 95)]
wells_df = wells_df[wells_df['EUR/PLL (BBL/FT) 60 Months'] < np.nanpercentile(wells_df['EUR/PLL (BBL/FT) 60 Months'], 95)]
wells_df = wells_df.reset_index()

# Convert well data to GeoDataFrame
geometry = [Point(xy) for xy in zip(wells_df['longitude'], wells_df['latitude'])]
geo_data = gpd.GeoDataFrame(wells_df, geometry=geometry)

# Set the CRS to WGS84 (EPSG:4326)
geo_data.set_crs(epsg=4326, inplace=True)

# Load the township boundaries shapefile
shape_data = gpd.read_file('townships_shapefile.shp')  # Replace with your shapefile path

# Ensure the CRS for the township boundaries is set to WGS84
shape_data.to_crs(epsg=4326, inplace=True)

# Spatial join to assign points to township polygons
joined = gpd.sjoin(geo_data, shape_data, how='left', op='within')

# Calculate average values for each township polygon
shape_data['avg_6_months'] = joined.groupby('index_right')['EUR/PLL (BBL/FT) 6 Months'].mean()
shape_data['avg_60_months'] = joined.groupby('index_right')['EUR/PLL (BBL/FT) 60 Months'].mean()

# Replace NaN values with 0 for visualization
shape_data['avg_6_months'] = shape_data['avg_6_months'].fillna(0)
shape_data['avg_60_months'] = shape_data['avg_60_months'].fillna(0)

# Convert to GeoJSON
shape_json_6 = shape_data[['geometry', 'avg_6_months']].to_json()
shape_json_60 = shape_data[['geometry', 'avg_60_months']].to_json()

# Create a base map
m = folium.Map(location=[geo_data['latitude'].mean(), geo_data['longitude'].mean()], zoom_start=10)

# Create colormaps
colormap_6 = cm.LinearColormap(colors=['blue', 'green', 'yellow', 'orange', 'red'],
                               vmin=shape_data['avg_6_months'].min(),
                               vmax=shape_data['avg_6_months'].max(),
                               caption='EUR Value (6 Months)')

colormap_60 = cm.LinearColormap(colors=['blue', 'green', 'yellow', 'orange', 'red'],
                                vmin=shape_data['avg_60_months'].min(),
                                vmax=shape_data['avg_60_months'].max(),
                                caption='EUR Value (60 Months)')

# Function to add choropleth for a specific time period
def add_choropleth(m, shape_json, colormap, field):
    folium.GeoJson(
        shape_json,
        style_function=lambda feature: {
            'fillColor': colormap(feature['properties'][field]),
            'color': 'black',
            'weight': 0.5,
            'fillOpacity': 0.7,
        },
        tooltip=folium.GeoJsonTooltip(
            fields=[field],
            aliases=['EUR Value'],
            localize=True
        )
    ).add_to(m)
    colormap.add_to(m)

# Add initial choropleth layer for 6 months
add_choropleth(m, shape_json_6, colormap_6, 'avg_6_months')

# Add layer control
folium.LayerControl().add_to(m)

# Add a dropdown to switch between time periods
from folium import Map, LayerControl
from folium.features import CustomIcon

dropdown_script = """
<script>
    function updateChoropleth(layerName) {
        var mapLayers = map._layers;
        for (var i in mapLayers) {
            if (mapLayers[i].feature && mapLayers[i].feature.properties && (mapLayers[i].feature.properties.avg_6_months !== undefined || mapLayers[i].feature.properties.avg_60_months !== undefined)) {
                map.removeLayer(mapLayers[i]);
            }
        }
        if (layerName === '6 Months') {
            add_choropleth_6();
        } else if (layerName === '60 Months') {
            add_choropleth_60();
        }
    }

    function add_choropleth_6() {
        var choropleth_6 = L.geoJson(shape_json_6, {
            style: function (feature) {
                return {
                    fillColor: colormap_6(feature.properties.avg_6_months),
                    color: 'black',
                    weight: 0.5,
                    fillOpacity: 0.7
                };
            },
            onEachFeature: function (feature, layer) {
                layer.bindPopup('EUR (6 Months): ' + feature.properties.avg_6_months.toFixed(2));
            }
        }).addTo(map);
        colormap_6.addTo(map);
    }

    function add_choropleth_60() {
        var choropleth_60 = L.geoJson(shape_json_60, {
            style: function (feature) {
                return {
                    fillColor: colormap_60(feature.properties.avg_60_months),
                    color: 'black',
                    weight: 0.5,
                    fillOpacity: 0.7
                };
            },
            onEachFeature: function (feature, layer) {
                layer.bindPopup('EUR (60 Months): ' + feature.properties.avg_60_months.toFixed(2));
            }
        }).addTo(map);
        colormap_60.addTo(map);
    }
</script>
"""

dropdown_html = """
<select onchange="updateChoropleth(this.value)">
    <option value="6 Months">6 Months</option>
    <option value="60 Months">60 Months</option>
</select>
"""

m.get_root().html.add_child(folium.Element(dropdown_script))
m.get_root().html.add_child(folium.Element(dropdown_html))

# Save to HTML
m.save('choropleth_map.html')

print("HTML file created successfully: choropleth_map.html")
