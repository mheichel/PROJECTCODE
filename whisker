import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
from matplotlib.backends.backend_pdf import PdfPages

def plot_box_whisker(bin_value, uniquecolumn, columns_to_plot, df, value_range):
    fig, axes = plt.subplots(ncols=len(columns_to_plot), figsize=(60, 30), facecolor='lightgray')
    for column, axis in zip(columns_to_plot, axes):
        filtered_data = df[df[uniquecolumn] == bin_value][column]
        if filtered_data.count() > 0:
            sb.boxplot(data=filtered_data, ax=axis, showfliers=True, showmeans=True, 
                       boxprops=dict(facecolor='skyblue', color='blue'), 
                       whiskerprops=dict(color='blue'),
                       capprops=dict(color='blue'),
                       medianprops=dict(color='red'),
                       meanprops=dict(markerfacecolor='white', markeredgecolor='black', marker='o'))
            
            axis.set_title(column, fontsize=20, color='black')
            axis.set(xticklabels=[], xticks=[], ylabel='')
            axis.set_ylim(value_range[0], value_range[1])
            axis.tick_params(axis='both', labelsize=18, labelcolor='black')
            axis.grid(axis='y', linestyle='--', alpha=0.7, color='gray')
            
            p25, p50, p75 = np.percentile(filtered_data, [25, 50, 75])
            mean = np.mean(filtered_data)
            std_dev = np.std(filtered_data)
            
            if p50 > value_range[0] and p50 < value_range[1]:
                axis.text(0.75, p50, f"P50: {p50:.2f} %", fontsize=12, ha='center', va='center', color='black')
            if p75 < value_range[1]:
                axis.text(0.75, p25, f"P25: {p25:.2f} %", fontsize=12, ha='center', va='center', color='black')
            if p25 > -50:
                axis.text(0.75, p75, f"P75: {p75:.2f} %", fontsize=12, ha='center', va='center', color='black')
            
            # Adding mean and std deviation
            if mean > value_range[0] and mean < value_range[1]:
                axis.axhline(mean, color='green', linestyle='--')
                axis.text(0.75, mean, f"Mean: {mean:.2f}", fontsize=12, ha='center', va='center', color='green')
            if std_dev > 0:
                axis.text(0.75, mean - std_dev, f"STD: {std_dev:.2f}", fontsize=12, ha='center', va='center', color='purple')
        else:
            print(f"No data for {column} in bin {bin_value}")
    return fig

def BoxWhisker(uniquebin, uniquecolumn, columns_to_plot, df, pdf_filename, value_range=(0, 180)):
    """
    Generates box and whisker plots for different bins of data.
    
    Parameters:
        uniquebin (list): List of unique bin values.
        uniquecolumn (str): Column name to filter bins.
        columns_to_plot (list): List of column names to plot.
        df (DataFrame): DataFrame containing the data.
        pdf_filename (str): Filename for the output PDF.
        value_range (tuple): Y-axis range for the plots.
    """
    with PdfPages(pdf_filename) as pdf:
        for bin_value in uniquebin:
            try:
                fig = plot_box_whisker(bin_value, uniquecolumn, columns_to_plot, df, value_range)
                plt.suptitle(f"{bin_value} ({len(df[df[uniquecolumn] == bin_value])} Wells)", fontsize=30, color='black')
                sb.set_theme(style='darkgrid')
                sb.despine(left=True)
                plt.tight_layout()
                pdf.savefig()
                plt.close()
            except Exception as e:
                print(f"Error processing bin {bin_value}: {e}")

# Example usage
# BoxWhisker(uniquebin, uniquecolumn, columns_to_plot, df, 'output.pdf')
