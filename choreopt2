import pandas as pd
import folium
import geopandas as gpd
import numpy as np
from shapely.geometry import Point
import branca.colormap as cm

# Load the wells_df
wells_df = pd.read_csv('AllWellsNoError.csv', usecols=['API 14', 'Surface Longitude', 'Surface Latitude', 'EUR/PLL (BBL/FT) 6 Months', 'EUR/PLL (BBL/FT) 60 Months'])
wells_df = wells_df.rename(columns={'Surface Longitude': 'longitude', 'Surface Latitude': 'latitude'})
wells_df = wells_df[wells_df['latitude'] > 0.1]
wells_df = wells_df[wells_df['EUR/PLL (BBL/FT) 6 Months'] > 0.1]
wells_df = wells_df[wells_df['EUR/PLL (BBL/FT) 6 Months'] < np.nanpercentile(wells_df['EUR/PLL (BBL/FT) 6 Months'], 95)]
wells_df = wells_df[wells_df['EUR/PLL (BBL/FT) 60 Months'] < np.nanpercentile(wells_df['EUR/PLL (BBL/FT) 60 Months'], 95)]
wells_df = wells_df.reset_index()

# Convert well data to GeoDataFrame
geometry = [Point(xy) for xy in zip(wells_df['longitude'], wells_df['latitude'])]
geo_data = gpd.GeoDataFrame(wells_df, geometry=geometry)

# Set the CRS to WGS84 (EPSG:4326)
geo_data.set_crs(epsg=4326, inplace=True)

# Load the township boundaries shapefile
shape_data = gpd.read_file('townships_shapefile.shp')  # Replace with your shapefile path

# Ensure the CRS for the township boundaries is set to WGS84
shape_data.to_crs(epsg=4326, inplace=True)

# Spatial join to assign points to township polygons
joined = gpd.sjoin(geo_data, shape_data, how='left', op='within')

# Calculate average values for each township polygon
shape_data['avg_6_months'] = joined.groupby('index_right')['EUR/PLL (BBL/FT) 6 Months'].mean()
shape_data['avg_60_months'] = joined.groupby('index_right')['EUR/PLL (BBL/FT) 60 Months'].mean()

# Drop sections where the average value is 0
shape_data = shape_data[(shape_data['avg_6_months'] > 0) | (shape_data['avg_60_months'] > 0)]

def create_map(column):
    m = folium.Map(location=[geo_data['latitude'].mean(), geo_data['longitude'].mean()], zoom_start=10)
    
    colormap = cm.LinearColormap(colors=['blue', 'green', 'yellow', 'orange', 'red'],
                                 vmin=shape_data[column].min(),
                                 vmax=shape_data[column].max(),
                                 caption=f'{column} Value')
    
    shape_json = shape_data[['geometry', column]].to_json()
    
    folium.GeoJson(
        shape_json,
        style_function=lambda feature: {
            'fillColor': colormap(feature['properties'][column]),
            'color': 'black',
            'weight': 0.5,
            'fillOpacity': 0.7,
        },
        tooltip=folium.GeoJsonTooltip(
            fields=[column],
            aliases=[f'{column} Value'],
            localize=True
        )
    ).add_to(m)
    
    colormap.add_to(m)
    
    # Add layer control
    folium.LayerControl().add_to(m)
    
    # Save to HTML
    m.save(f'map_{column}.html')

# Generate initial map
create_map('avg_6_months')

# Save the HTML template with JavaScript for dynamic updates
html_template = """
<!DOCTYPE html>
<html>
<head>
    <title>Dynamic Map</title>
    <script>
        function updateMap(column) {{
            fetch('map_' + column + '.html')
                .then(response => response.text())
                .then(html => {{
                    document.getElementById('map').innerHTML = html;
                }});
        }}
    </script>
</head>
<body onload="updateMap('avg_6_months')">
    <select onchange="updateMap(this.value)">
        <option value="avg_6_months">6 Months</option>
        <option value="avg_60_months">60 Months</option>
    </select>
    <div id="map" style="width: 100%; height: 600px;"></div>
</body>
</html>
"""

with open('dynamic_map.html', 'w') as f:
    f.write(html_template)
