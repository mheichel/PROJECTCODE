import pandas as pd
import plotly.graph_objs as go
import glob

def load_files(file_pattern):
    files = glob.glob(file_pattern)
    data = {}
    for file in files:
        df = pd.read_csv(file)
        # Normalize the dates
        df['Normalized Month'] = df.groupby('API 14')['Date'].rank(method='dense').astype(int)
        # Extract the month count from the file name (assumes the format 'Delaware_NM_x_Months_Combined_Monthly.csv')
        month_count = int(file.split('_')[2])
        data[month_count] = df
    return data

def calculate_percentiles(df):
    percentiles = df.groupby('Normalized Month').agg({
        'Oil Production (BBL/M)': ['sum', lambda x: x.quantile(0.1), lambda x: x.median(), lambda x: x.quantile(0.9)],
        'Oil Forecast (BBL/M)': ['sum', lambda x: x.quantile(0.1), lambda x: x.median(), lambda x: x.quantile(0.9)]
    })
    percentiles.columns = ['Total Production', 'P10 Production', 'P50 Production', 'P90 Production',
                           'Total Forecast', 'P10 Forecast', 'P50 Forecast', 'P90 Forecast']
    percentiles = percentiles.cumsum()
    return percentiles

def create_production_plots(data_dict):
    # Initialize empty DataFrame to aggregate data
    aggregated_data = pd.DataFrame()

    # Iterate through the dictionary to combine data
    for key in sorted(data_dict.keys()):
        df = data_dict[key]
        df['Month'] = key
        aggregated_data = pd.concat([aggregated_data, df], ignore_index=True)

    # Calculate percentiles
    percentiles = calculate_percentiles(aggregated_data)

    # Plot production data
    scatter = go.Figure()
    for col in ['P10 Production', 'P50 Production', 'P90 Production']:
        scatter.add_trace(go.Scatter(x=percentiles.index, y=percentiles[col], mode='lines', name=col))

    for col in ['P10 Forecast', 'P50 Forecast', 'P90 Forecast']:
        scatter.add_trace(go.Scatter(x=percentiles.index, y=percentiles[col], mode='lines', name=col, line=dict(dash='dot')))

    scatter.update_layout(title='Production Data', xaxis_title='Normalized Month', yaxis_title='Production', yaxis_type='log')

    # Cumulative production graph
    cum_graph = go.Figure()
    for col in ['P10 Production', 'P50 Production', 'P90 Production']:
        cum_graph.add_trace(go.Scatter(x=percentiles.index, y=percentiles[col], mode='lines', name=col))
    
    for col in ['P10 Forecast', 'P50 Forecast', 'P90 Forecast']:
        cum_graph.add_trace(go.Scatter(x=percentiles.index, y=percentiles[col], mode='lines', name=col, line=dict(dash='dot')))

    cum_graph.update_layout(title='Cumulative Production', xaxis_title='Months', yaxis_title='Cumulative Production')

    # Save to HTML
    scatter.write_html('scatter.html')
    cum_graph.write_html('cumulative.html')

# Main execution
file_pattern = 'Delaware_NM_*_Months_Combined_Monthly.csv'
data_dict = load_files(file_pattern)
create_production_plots(data_dict)
