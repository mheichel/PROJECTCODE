import pandas as pd
import plotly.graph_objs as go
import plotly.subplots as sp
import glob

def load_files(file_pattern):
    files = glob.glob(file_pattern)
    data = {}
    for file in files:
        df = pd.read_csv(file)
        # Normalize the dates
        df['Date'] = pd.to_datetime(df['Date'])
        df = df.sort_values(by=['API 14', 'Date'])
        df['Normalized Month'] = df.groupby('API 14').cumcount() + 1
        df = df[df['Normalized Month'] <= 60]  # Truncate to first 60 months
        # Extract the month count from the file name (assumes the format 'Delaware_NM_x_Months_Combined_Monthly.csv')
        month_count = int(file.split('_')[2])
        data[month_count] = df
    return data

def calculate_cumulative(df):
    df['Cumulative Production'] = df.groupby('API 14')['Oil Production (BBL/M)'].cumsum()
    df['Cumulative Forecast'] = df.groupby('API 14')['Oil Forecast (BBL/M)'].cumsum()
    return df

def filter_wells(data_dict):
    filtered_data = {}
    for month, df in data_dict.items():
        if month == 60:
            api_60 = df['API 14'].unique()
        if month == 6:
            api_6 = df['API 14'].unique()
    valid_apis = set(api_6).intersection(api_60)
    for month, df in data_dict.items():
        df = df[df['API 14'].isin(valid_apis)]
        filtered_data[month] = df
    return filtered_data

def calculate_p90(data_dict):
    differences = []
    for api in data_dict[60]['API 14'].unique():
        cum_6 = data_dict[6].loc[data_dict[6]['API 14'] == api, 'Cumulative Forecast'].iloc[-1]
        cum_60 = data_dict[60].loc[data_dict[60]['API 14'] == api, 'Cumulative Forecast'].iloc[-1]
        if cum_60 != 0:
            abs_diff = abs(cum_60 - cum_6)
            differences.append((api, abs_diff))
    
    df_differences = pd.DataFrame(differences, columns=['API 14', 'Abs Difference'])
    p90_api = df_differences.nlargest(int(len(df_differences) * 0.1), 'Abs Difference')['API 14']
    
    return p90_api.tolist()

def plot_production(data_dict, p90_api):
    scatter = go.Figure()

    # Plot production data only for the 6-month file
    df = data_dict[6]
    for api in p90_api:
        well_data = df[df['API 14'] == api]
        scatter.add_trace(go.Scatter(
            x=well_data['Normalized Month'], 
            y=well_data['Oil Production (BBL/M)'],
            mode='lines',
            name=f'P90 Production - API {api}'
        ))
        scatter.add_trace(go.Scatter(
            x=well_data['Normalized Month'], 
            y=well_data['Oil Forecast (BBL/M)'],
            mode='lines',
            line=dict(dash='dot'),
            name=f'P90 Forecast - API {api}'
        ))

    scatter.update_layout(title='Production Data', xaxis_title='Normalized Month', yaxis_title='Production')
    
    return scatter

def plot_cumulative_production(data_dict, p90_api):
    cum_graph = go.Figure()

    for api in p90_api:
        for month in sorted(data_dict.keys()):
            df = data_dict[month]
            well_data = df[df['API 14'] == api]
            well_data['Cumulative Production'] = well_data['Oil Production (BBL/M)'].cumsum()
            well_data['Cumulative Forecast'] = well_data['Oil Forecast (BBL/M)'].cumsum()
            cum_graph.add_trace(go.Scatter(
                x=well_data['Normalized Month'], 
                y=well_data['Cumulative Production'],
                mode='lines',
                name=f'P90 Cumulative Production - API {api} (Month {month})'
            ))
            cum_graph.add_trace(go.Scatter(
                x=well_data['Normalized Month'], 
                y=well_data['Cumulative Forecast'],
                mode='lines',
                line=dict(dash='dot'),
                name=f'P90 Cumulative Forecast - API {api} (Month {month})'
            ))

    cum_graph.update_layout(title='Cumulative Production', xaxis_title='Normalized Month', yaxis_title='Cumulative Production')
    
    return cum_graph

def combine_plots(scatter, cum_graph):
    fig = sp.make_subplots(rows=2, cols=1, shared_xaxes=True, vertical_spacing=0.1, subplot_titles=('Production Data', 'Cumulative Production'))

    # Add traces from scatter plot
    for trace in scatter.data:
        fig.add_trace(trace, row=1, col=1)

    # Add traces from cumulative plot
    for trace in cum_graph.data:
        fig.add_trace(trace, row=2, col=1)

    fig.update_layout(
        height=800,
        title_text="Production Data and Cumulative Production",
        xaxis_title='Normalized Month',
        yaxis_title='Production / Cumulative Production'
    )

    fig.write_html('combined.html')

# Main execution
file_pattern = 'Delaware_NM_*_Months_Combined_Monthly.csv'
data_dict = load_files(file_pattern)

# Calculate cumulative values
for month in data_dict:
    data_dict[month] = calculate_cumulative(data_dict[month])

# Filter wells based on criteria
filtered_data_dict = filter_wells(data_dict)

# Calculate P90
p90_api = calculate_p90(filtered_data_dict)

# Plot production data
scatter = plot_production(filtered_data_dict, p90_api)

# Plot cumulative production data
cum_graph = plot_cumulative_production(filtered_data_dict, p90_api)

# Combine and save the plots
combine_plots(scatter, cum_graph)
