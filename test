# Add layers to the HTML
html_template += """
        var currentLayer;

        function addInitialLayer() {
            console.log('Initializing layer_avg_6_months');
            currentLayer = window['layer_avg_6_months'];
            if (currentLayer) {
                currentLayer.addTo(map);
            } else {
                console.error('layer_avg_6_months is not defined');
            }
        }

"""

for col in columns[3:]:
    months = col.split()[2]  # Extract the number of months
    avg_col_name = f'avg_{months.lower()}_months'
    html_template += f"""
        var layer_{avg_col_name} = L.geoJson({geojson_data[avg_col_name]}, {{
            style: style_{avg_col_name},
            onEachFeature: function (feature, layer) {{
                layer.bindPopup('EUR ({months} Months): ' + feature.properties.{avg_col_name}.toFixed(2));
            }}
        }});
        window['layer_{avg_col_name}'] = layer_{avg_col_name};
        console.log('Defined layer_{avg_col_name}');
    """

html_template += """
        addInitialLayer();

        function updateMap() {
            var selectedLayer = document.getElementById('layer-select').value;
            console.log('Selected layer:', selectedLayer);
            if (currentLayer) {
                console.log('Removing current layer:', currentLayer);
                map.removeLayer(currentLayer);
            }
            currentLayer = window['layer_' + selectedLayer];
            console.log('Adding new layer:', currentLayer);
            if (currentLayer) {
                currentLayer.addTo(map);
                updateLegend(colormaps[selectedLayer], [0,30,60,90,120,150]);
            } else {
                console.error('Layer not found:', selectedLayer);
            }
        }

        function updateLegend(colormap, domain) {
            var legend = d3.select('#legend');
            legend.html('<h4>EUR Value</h4>');
            var legendScale = d3.scaleLinear()
                .domain([domain[0], domain[domain.length - 1]])
                .range([0, 300]);
            var legendAxis = d3.axisBottom(legendScale)
                .ticks(5)
                .tickFormat(d3.format(".2f"));

            var svg = legend.append('svg')
                .attr('width', 320)
                .attr('height', 50);

            svg.append('g')
                .attr('class', 'axis')
                .attr('transform', 'translate(10,30)')
                .call(legendAxis);

            var gradient = svg.append('defs')
                .append('linearGradient')
                .attr('id', 'gradient')
                .attr('x1', '0%')
                .attr('y1', '0%')
                .attr('x2', '100%')
                .attr('y2', '0%');

            domain.forEach(function(d, i) {
                gradient.append('stop')
                    .attr('offset', (i / (domain.length - 1) * 100) + '%')
                    .attr('stop-color', colormap(d));
            });

            svg.append('rect')
                .attr('width', 300)
                .attr('height', 10)
                .attr('x', 10)
                .attr('y', 20)
                .style('fill', 'url(#gradient)');
        }

        updateLegend(colormaps['avg_6_months'], [0,30,60,90,120,150]);
    </script>
</body>
</html>
"""

# Save the HTML template
with open('dynamic_map.html', 'w') as f:
    f.write(html_template)

print("HTML file created successfully: dynamic_map.html")
