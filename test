import pandas as pd
import geopandas as gpd
import numpy as np
from shapely.geometry import Point
import json
import os
import re

# Function to sanitize file names
def sanitize_filename(filename):
    return re.sub(r'[\\/*?:"<>|]', "_", filename)

# Load the wells_df
columns = [
    'API 14', 'longitude', 'latitude',
    'EUR/PLL (BBL/FT) 6 Months', 'EUR/PLL (BBL/FT) 12 Months', 'EUR/PLL (BBL/FT) 18 Months',
    'EUR/PLL (BBL/FT) 24 Months', 'EUR/PLL (BBL/FT) 30 Months', 'EUR/PLL (BBL/FT) 36 Months',
    'EUR/PLL (BBL/FT) 42 Months', 'EUR/PLL (BBL/FT) 48 Months', 'EUR/PLL (BBL/FT) 54 Months',
    'EUR/PLL (BBL/FT) 60 Months', 'MyIntervalPlus', 'MyPerfInterval', 'FirstProdYear'
]

wells_df = pd.read_csv('AllWellsNoError.csv', usecols=columns)
wells_df = wells_df.rename(columns={'Surface Longitude': 'longitude', 'Surface Latitude': 'latitude'})
wells_df = wells_df[wells_df['latitude'] > 0.1]

for col in columns[3:13]:
    wells_df = wells_df[wells_df[col] > 0.1]
    wells_df = wells_df[wells_df[col] < np.nanpercentile(wells_df[col], 95)]

wells_df = wells_df.reset_index()

# Convert well data to GeoDataFrame
geometry = [Point(xy) for xy in zip(wells_df['longitude'], wells_df['latitude'])]
geo_data = gpd.GeoDataFrame(wells_df, geometry=geometry)
geo_data.set_crs(epsg=4326, inplace=True)

# Load the township boundaries shapefile
shape_data = gpd.read_file('PLSSFirstDivision.geojson')
shape_data.to_crs(epsg=4326, inplace=True)

# Spatial join to assign points to township polygons
joined = gpd.sjoin(geo_data, shape_data, how='left', op='within')

# Get unique values for filters
intervals = wells_df['MyIntervalPlus'].unique()
pll_intervals = wells_df['MyPerfInterval'].unique()
vintages = wells_df['FirstProdYear'].unique()

output_dir = 'precomputed_geojsons'
os.makedirs(output_dir, exist_ok=True)

# Precompute and save filtered datasets
for interval in intervals:
    for pll_interval in pll_intervals:
        for vintage in vintages:
            filtered = joined[(joined['MyIntervalPlus'] == interval) & 
                              (joined['MyPerfInterval'] == pll_interval) & 
                              (joined['FirstProdYear'] == vintage)]
            
            if not filtered.empty:
                avg_col_names = []
                for col in columns[3:13]:
                    months = col.split()[2]
                    avg_col_name = f'avg_{months}_months'
                    shape_data[avg_col_name] = filtered.groupby('index_right')[col].mean()
                    avg_col_names.append(avg_col_name)
                
                shape_data_filtered = shape_data[(shape_data[avg_col_names] > 0).any(axis=1)]
                geojson_filtered = shape_data_filtered.to_json()
                
                filename = f'{interval}_{pll_interval}_{vintage}.geojson'
                sanitized_filename = sanitize_filename(filename)
                filepath = os.path.join(output_dir, sanitized_filename)
                
                with open(filepath, 'w') as f:
                    f.write(geojson_filtered)

print("Precomputed GeoJSON files saved in:", output_dir)
