import pandas as pd
import geopandas as gpd
import numpy as np
from shapely.geometry import Point
import folium
from folium.plugins import HeatMap
import json

# Load the wells_df
columns = [
    'API 14', 'Surface Longitude', 'Surface Latitude',
    'EUR/PLL (BBL/FT) 6 Months', 'EUR/PLL (BBL/FT) 12 Months', 'EUR/PLL (BBL/FT) 18 Months',
    'EUR/PLL (BBL/FT) 24 Months', 'EUR/PLL (BBL/FT) 30 Months', 'EUR/PLL (BBL/FT) 36 Months',
    'EUR/PLL (BBL/FT) 42 Months', 'EUR/PLL (BBL/FT) 48 Months', 'EUR/PLL (BBL/FT) 54 Months',
    'EUR/PLL (BBL/FT) 60 Months', 'MyIntervalPlus', 'MyPerfInterval', 'FirstProdYear'
]

wells_df = pd.read_csv('AllWellsNoError.csv', usecols=columns)
wells_df = wells_df.rename(columns={'Surface Longitude': 'longitude', 'Surface Latitude': 'latitude'})
wells_df = wells_df[wells_df['latitude'] > 0.1]

for col in columns[3:13]:
    wells_df = wells_df[wells_df[col] > 0.1]
    wells_df = wells_df[wells_df[col] < np.nanpercentile(wells_df[col], 95)]

wells_df = wells_df.reset_index()

# Convert well data to GeoDataFrame
geometry = [Point(xy) for xy in zip(wells_df['longitude'], wells_df['latitude'])]
geo_data = gpd.GeoDataFrame(wells_df, geometry=geometry)
geo_data.set_crs(epsg=4326, inplace=True)

# Load the township boundaries shapefile
shape_data1 = gpd.read_file('PLSSFirstDivision.geojson')
shape_data1.to_crs(epsg=4326, inplace=True)

shape_data2 = gpd.read_file('PLSSTownship.geojson')
shape_data2.to_crs(epsg=4326, inplace=True)

# Spatial join to assign points to township polygons
joined1 = gpd.sjoin(geo_data, shape_data1, how='left', op='within')
joined2 = gpd.sjoin(geo_data, shape_data2, how='left', op='within')

# Calculate average values for each township polygon
def calculate_averages(joined, shape_data):
    avg_col_names = []
    for col in columns[3:13]:
        months = col.split()[2]
        avg_col_name = f'avg_{months}_months'
        shape_data[avg_col_name] = joined.groupby('index_right')[col].mean()
        avg_col_names.append(avg_col_name)
    shape_data = shape_data[(shape_data[avg_col_names] > 0).any(axis=1)]
    return shape_data, avg_col_names

shape_data1, avg_col_names1 = calculate_averages(joined1, shape_data1)
shape_data2, avg_col_names2 = calculate_averages(joined2, shape_data2)

# Save the joined data to JSON for client-side processing
shape_data1.to_file('shape_data1.json', driver='GeoJSON')
shape_data2.to_file('shape_data2.json', driver='GeoJSON')

# Initialize the map
mean_latitude = wells_df['latitude'].mean()
mean_longitude = wells_df['longitude'].mean()

m = folium.Map(location=[mean_latitude, mean_longitude], zoom_start=10)

# Define colormap
colormap = folium.LinearColormap(colors=['blue', 'green', 'yellow', 'orange', 'red'], vmin=0, vmax=150, caption='EUR/PLL (BBL/FT)')

# Add shapefile layers
def add_shapefile_layer(shape_data, avg_col_name, layer_name):
    folium.GeoJson(
        shape_data,
        style_function=lambda feature: {
            'fillColor': colormap(feature['properties'][avg_col_name]),
            'color': 'black',
            'weight': 0.5,
            'fillOpacity': 0.7
        },
        tooltip=folium.GeoJsonTooltip(fields=[avg_col_name], aliases=['EUR/PLL (BBL/FT):'])
    ).add_to(folium.FeatureGroup(name=layer_name).add_to(m))

# Add layers for first shapefile
for col in avg_col_names1:
    months = col.split('_')[1]
    add_shapefile_layer('shape_data1.json', col, f'First Shapefile - {months} Months')

# Add layers for second shapefile
for col in avg_col_names2:
    months = col.split('_')[1]
    add_shapefile_layer('shape_data2.json', col, f'Second Shapefile - {months} Months')

# Add layer control
folium.LayerControl().add_to(m)

# Add colormap to the map
colormap.add_to(m)

# Save the map to an HTML file
m.save('dynamic_map.html')

print("HTML file created successfully: dynamic_map.html")
