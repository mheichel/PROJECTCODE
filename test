# Create colormaps with fixed min and max values using a gradient and reverse the gradient
colormap_6 = cm.LinearColormap(['blue', 'green', 'yellow', 'orange', 'red'], vmin=25, vmax=225, caption='EUR Value (6 Months)').reversed()
colormap_60 = cm.LinearColormap(['blue', 'green', 'yellow', 'orange', 'red'], vmin=25, vmax=225, caption='EUR Value (60 Months)').reversed()

# Create GeoJSON data for both datasets
geojson_6 = shape_data[['geometry', 'avg_6_months']].to_json()
geojson_60 = shape_data[['geometry', 'avg_60_months']].to_json()

# Serialize colormap to JSON format
colormap_6_json = json.dumps(list(colormap_6.colors))
colormap_60_json = json.dumps(list(colormap_60.colors))

# Create base map with Folium
m = folium.Map(location=[geo_data['latitude'].mean(), geo_data['longitude'].mean()], zoom_start=10)
folium.GeoJson(geojson_6, name='6 Months', style_function=lambda feature: {
    'fillColor': colormap_6(feature['properties']['avg_6_months']),
    'color': 'black',
    'weight': 0.5,
    'fillOpacity': 0.7
}).add_to(m)

# Save the map to an HTML file
m.save('base_map.html')

# Read the generated HTML content of the base map
with open('base_map.html', 'r') as file:
    base_map_html = file.read()

# Extract the necessary parts of the base_map_html to embed into the final HTML
start_marker = '<div style="width:100%;height:100%" id="map">'
end_marker = '</div>'
base_map_content = base_map_html.split(start_marker)[1].split(end_marker)[0]

# Generate HTML
html_template = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Dynamic Map</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <style>
        html, body {{
            height: 100%;
            margin: 0;
        }}
        #map {{
            width: 100%;
            height: 100%;
        }}
        #controls {{
            position: absolute;
            top: 10px;
            left: 50px;
            z-index: 1000;
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        }}
        .legend {{
            position: absolute;
            top: 10px;
            right: 50px;
            z-index: 1000;
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        }}
    </style>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://d3js.org/d3.v5.min.js"></script>
</head>
<body>
    <div id="controls">
        <select id="layer-select" onchange="updateMap()">
            <option value="avg_6_months">6 Months</option>
            <option value="avg_60_months">60 Months</option>
        </select>
    </div>
    <div id="map">{base_map_content}</div>
    <script>
        var colormap_6 = d3.scaleSequential(d3.interpolateRgbBasis({colormap_6_json}))
            .domain([225, 25]);

        var colormap_60 = d3.scaleSequential(d3.interpolateRgbBasis({colormap_60_json}))
            .domain([225, 25]);

        var layer_6 = L.geoJson({geojson_6}, {{
            style: function(feature) {{
                return {{
                    fillColor: colormap_6(feature.properties.avg_6_months),
                    color: 'black',
                    weight: 0.5,
                    fillOpacity: 0.7
                }};
            }},
            onEachFeature: function (feature, layer) {{
                layer.bindPopup('EUR (6 Months): ' + feature.properties.avg_6_months.toFixed(2));
            }}
        }});

        var layer_60 = L.geoJson({geojson_60}, {{
            style: function(feature) {{
                return {{
                    fillColor: colormap_60(feature.properties.avg_60_months),
                    color: 'black',
                    weight: 0.5,
                    fillOpacity: 0.7
                }};
            }},
            onEachFeature: function (feature, layer) {{
                layer.bindPopup('EUR (60 Months): ' + feature.properties.avg_60_months.toFixed(2));
            }}
        }});

        function updateMap() {{
            var selectedLayer = document.getElementById('layer-select').value;
            if (selectedLayer === 'avg_6_months') {{
                map.removeLayer(layer_60);
                map.addLayer(layer_6);
                updateLegend(colormap_6, 25, 225);
            }} else {{
                map.removeLayer(layer_6);
                map.addLayer(layer_60);
                updateLegend(colormap_60, 25, 225);
            }}
        }}

        function updateLegend(colormap, min, max) {{
            var legend = d3.select('.legend');
            legend.html('<h4>EUR Value</h4>');
            var legendScale = d3.scaleLinear()
                .domain([min, max])
                .range([0, 300]);
            var legendAxis = d3.axisBottom(legendScale)
                .ticks(5)
                .tickFormat(d3.format(".2f"));

            var svg = legend.append('svg')
                .attr('width', 320)
                .attr('height', 50);

            svg.append('g')
                .attr('class', 'axis')
                .attr('transform', 'translate(10,30)')
                .call(legendAxis);

            var gradient = svg.append('defs')
                .append('linearGradient')
                .attr('id', 'gradient')
                .attr('x1', '0%')
                .attr('y1', '0%')
                .attr('x2', '100%')
                .attr('y2', '0%');

            gradient.append('stop')
                .attr('offset', '0%')
                .attr('stop-color', colormap(min));

            gradient.append('stop')
                .attr('offset', '100%')
                .attr('stop-color', colormap(max));

            svg.append('rect')
                .attr('width', 300)
                .attr('height', 10)
                .attr('x', 10)
                .attr('y', 20)
                .style('fill', 'url(#gradient)');
        }

        updateLegend(colormap_6, 25, 225);
    </script>
    <div class="legend"></div>
</body>
</html>
"""

# Save the HTML template
with open('dynamic_map.html', 'w') as f:
    f.write(html_template)

print("HTML file created successfully: dynamic_map.html")
